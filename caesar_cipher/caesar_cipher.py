# import nltk
# nltk.download('words')
# from nltk.corpus import words
# word_list = words.words()

# alphaset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'

def encrypt(plain_text, key):
    """
    Return the encrypted text generated by shifting input plain text characters left or right according to the key value provided (left for negative values, right for positive values); e.g., 'Hello World', 2 returns 'Jgnnq Yqtnf'.
    """
    encryption = ""

    for i in range(len(plain_text)):
        char = plain_text[i]
        # Pass punctuation marks and spaces
        if not char.isalpha():
            encryption += char
            continue
        # Encrypt uppercase characters
        elif char.isupper():
            """ Append to encryption the unicode character at 
            (unicode index of plain character + shift value less value of unicode 'A') 
            modulo 26 (for wraparound) plus value of unicode 'A' again for uppercase result.
            """
            encryption += chr((ord(char) + key-65) % 26 + 65)
        # Encrypt lowercase characters
        else:
            """ Append to encryption the unicode character at 
            (unicode index of plain character + shift value less value of unicode 'a') 
            modulo 26 (for wraparound) plus value of unicode 'a' again for lowercase result.
            """
            encryption += chr((ord(char) + key-97) % 26 + 97)
        
    return encryption
   
def decrypt(encrypted_text, key):
    """
    Return the decrypted text generated by shifting input encrypted text characters left or right opposite to the key value provided (right for negative values, left for positive values); e.g., 'Jgnnq Yqtnf', 2 returns 'Hello World'.
    """
    decryption = ""

    for i in range(len(encrypted_text)):
        char = encrypted_text[i]
        # Pass punctuation marks and spaces
        if not char.isalpha():
            decryption += char
            continue
        # Decrypt uppercase characters
        elif char.isupper():
            """ Append to decryption the unicode character at 
            (unicode index of plain character - shift value less value of unicode 'A') 
            modulo 26 (for wraparound) less value of unicode 'A' again for uppercase result.
            """
            decryption += chr((ord(char) - key-65) % 26 + 65)
        # Decrypt lowercase characters
        else:
            """ Append to decryption the unicode character at 
            (unicode index of plain character + shift value less value of unicode 'a') 
            modulo 26 (for wraparound) plus value of unicode 'a' again for lowercase result.
            """
            decryption += chr((ord(char) - key-97) % 26 + 97)
        
    return decryption
   




def code_cracker(encrypted_text):
    """
    Return the decrypted text generated by shifting input encrypted text characters left or right until the highest match to valid plain text is found.
    """
    pass




if __name__ == "__main__":
    # print(encrypt('Hello World', 2))
    # print(decrypt('Jgnnq Yqtnf', 2))
    print(encrypt('It was the best of times, it was the worst of times.', 4))    
    print(decrypt('Mx aew xli fiwx sj xmqiw, mx aew xli asvwx sj xmqiw.', 4))
